@page "/asynchronous_tree_view"
<SourceCodeLink Repository="Blazor.TreeViews" Page="@nameof(AsynchronousTreeView)" />

<h4>Default loading template</h4>
<TreeViewAsync GetChildrenAsync="GetChildrenAsync" HasChildrenAsync="HasChildrenAsync" AllowSelection="true" SelectedItems="SelectedItems" @ref="TreeView">
    <ItemTemplate>
        @context.Item.Self
    </ItemTemplate>
</TreeViewAsync>

<h4>Custom loading template</h4>
<TreeViewAsync GetChildrenAsync="GetChildrenAsync" HasChildrenAsync="HasChildrenAsync" AllowSelection="true" SelectedItems="SelectedItems">
    <ItemTemplate>
        @context.Item.Self
    </ItemTemplate>
    <LoadingTemplate>
        Loading...
    </LoadingTemplate>
</TreeViewAsync>

<text>Root node value:</text><br/>
<input @bind="RootNodeValue"/>
<button @onclick="async () => await TreeView.Refresh()">Refresh TreeView</button>

@code {
    private TreeViewAsync<Item> TreeView;

    private List<Item> SelectedItems { get; set; }

    private string RootNodeValue = "A";

    private async Task<List<Item>> GetChildrenAsync(Item i)
    {
        if (i == null)
        {
            return new List<Item> { new Item { Self = RootNodeValue }, new Item { Self = RootNodeValue } };
        }
        await Task.Delay(1000);
        return i.Self switch
        {
            "A" => new List<Item> { new Item { Self = "B1" }, new Item { Self = "B2" } },
            "B1" => new List<Item> { new Item { Self = "C1" }, new Item { Self = "C2" } },
            "B2" => new List<Item> { new Item { Self = "C1" } },
            "C1" => new List<Item> { new Item { Self = "D1" } },
            _ => new List<Item>()
        };
    }

    private async Task<bool> HasChildrenAsync(Item i)
    {
        if (i == null)
        {
            return true;
        }
        await Task.Delay(1000);
        return !(i.Self is "C2" or "D1");
    }

    private class Item
    {
        public string Self { get; set; }
    }
}
