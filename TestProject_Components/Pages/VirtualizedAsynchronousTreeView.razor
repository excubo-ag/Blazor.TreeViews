@page "/virtualized_asynchronous_tree_view"
<SourceCodeLink Repository="Blazor.TreeViews" Page="@nameof(VirtualizedAsynchronousTreeView)" />

<h4>Default loading template</h4>
<TreeViewAsync GetChildrenAsync="GetChildrenAsync" HasChildrenAsync="HasChildrenAsync" AllowSelection="true" SelectedItems="SelectedItems" Virtualize>
    <ItemTemplate>
        @context.Item.Self
    </ItemTemplate>
</TreeViewAsync>

<h4>Custom loading template</h4>
<TreeViewAsync GetChildrenAsync="GetChildrenAsync" HasChildrenAsync="HasChildrenAsync" AllowSelection="true" SelectedItems="SelectedItems" Virtualize>
    <ItemTemplate>
        @context.Item.Self
    </ItemTemplate>
    <LoadingTemplate>
        Loading...
    </LoadingTemplate>
</TreeViewAsync>

@code {

    private List<Item> SelectedItems { get; set; }

    private async Task<List<Item>> GetChildrenAsync(Item i)
    {
        if (i == null)
        {
            return new List<Item> { new Item { Self = "A" }, new Item { Self = "A" } };
        }
        await Task.Delay(1000);
        return i.Self switch
        {
            "A" => Enumerable.Range(1, 10000).Select(i => new Item { Self = "B" + i }).ToList(),
            "B1" => new List<Item> { new Item { Self = "C1" }, new Item { Self = "C2" } },
            "B2" => new List<Item> { new Item { Self = "C1" } },
            "C1" => new List<Item> { new Item { Self = "D1" } },
            _ => new List<Item>()
        };
    }

    private async Task<bool> HasChildrenAsync(Item i)
    {
        if (i == null)
        {
            return true;
        }
        await Task.Delay(1000);
        return !(i.Self is "C2" or "D1");
    }

    private class Item
    {
        public string Self { get; set; }
    }
}
