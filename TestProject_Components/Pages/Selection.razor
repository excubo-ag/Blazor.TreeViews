@page "/selection"
@inject SelectionStateProvider SelectionStateProvider;

<SourceCodeLink Repository="Blazor.TreeViews" Page="@nameof(Selection)" />

<TreeView @ref="tv" Items="Items" GetParent="GetParent" AllowSelection="true" @bind-SelectedItems="SelectedValues">
	<ItemTemplate>
		<div @onclick="() => { selectedItem = (selectedItem != context.Item) ? context.Item : null; }" style="background-color: @(selectedItem == context.Item ? "Highlight" : "inherit")">@context.Item</div>
	</ItemTemplate>
</TreeView>

@if (SelectedValues != null && SelectedValues.Any())
{
	<p>@string.Join(", ", SelectedValues)</p>
}
else
{
	<p>Click a checkbox to select an item (and its children; the parent state may also change)</p>
}
@if (selectedItem != null)
{
	<p>The highlighted item is @selectedItem</p>
}
else
{
	<p>Click on an item to highlight it.</p>
}


<div>
	<button @onclick="@(() => {SelectedValues.Clear(); tv.RefreshSelection(); InvokeAsync(StateHasChanged);} )">
		Set nothing Selected
	</button>
	This will clear the entire selection.
	<br />
	<button @onclick="@(() =>{ if (SelectedValues.Contains("3")) {return;} SelectedValues.Add("3"); tv.RefreshSelection(); InvokeAsync(StateHasChanged); })">
		Set 3 Selected
	</button>
	This will select item 3, and implicitly its child 3.1, which in turn will implicitly select items 3.1.1 and 3.1.2.
	<br />
	<button @onclick="@(() =>{ if (SelectedValues.Contains("3.1")) {return;} SelectedValues.Add("3.1");tv.RefreshSelection(); InvokeAsync(StateHasChanged); })">
		Set 3.1 Selected
	</button>
	This will select item 3.1, and implicitly its children 3.1.1 and 3.1.2. The parent (item 3) will also turn selected, as all the children of item 3 are selected.
	<br />
	<button @onclick="@(() =>{ if (SelectedValues.Contains("3.1.1")) {return;} SelectedValues.Add("3.1.1");tv.RefreshSelection(); InvokeAsync(StateHasChanged); })">
		Set 3.1.1 Selected
	</button>
	This will select item 3.1.1. Its parent (3.1) will go to indeterminate state, as one element (3.1.1) is selected, and another isn't (3.1.2). This will also influence the parent of 3.1 (which is 3), to go into indeterminate state.
	<br />
</div>


@code {
	// Modifications to the selection from beyond the TreeView (e.g. the buttons) require notifying the treeview to refresh.
	private TreeView<string> tv;
	protected override void OnInitialized()
	{
		SelectedValues = SelectionStateProvider.SelectedValues;
		base.OnInitialized();
	}
	private string selectedItem;
	private List<string> SelectedValues = new List<string>
	{
		"3.1.1"
	};
	private List<string> Items = new List<string>
	{
		"1",
		"1.1",
		"1.2",
		"2",
		"3",
		"3.1",
		"3.1.1",
		"3.1.2"
	};
	private string GetParent(string item)
	{
		var last_period = item.LastIndexOf('.');
		if (last_period < 0)
		{
			return null; // no parent
		}
		else
		{
			return item.Substring(0, last_period);
		}
	}
}